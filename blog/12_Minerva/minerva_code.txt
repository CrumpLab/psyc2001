


## Basic model without loop

```{r}
vector_length <- 10
num_items <- 100

# make random feature vectors for each item
# Rows are items
# Columns are features
items <- t(replicate(num_items,
                   sample( rep(c(1,-1), vector_length/2) )
                   ))

# define indices for old and new items
old <- 1:50
new <- 51:100

# put old items into a memory matrix
memory <- items[old,]

# get an item to probe memory
probe_id <- 53
probe <- items[probe_id,]

# compute similarities between probe and all traces
similarities <- RsemanticLibrarian::cosine_x_to_m(probe,memory)^5

# activate traces by weighted similarity
activations <- memory * c(similarities)

# generate echo and global activation
echo <- colSums(activations)
global_activation <- sum(similarities)

# compare echo to probe
lsa::cosine(probe,echo)
global_activation

```


```{r}

generate_unique_random_items <- function(num_items = 100,
                                         vector_length = 20){
  items <- t(replicate(num_items,
                   sample( rep(c(1,-1), vector_length/2) )
                   ))

  correlation_matrix <- cor(t(items))
  upper_triangle <- correlation_matrix[upper.tri(correlation_matrix)]
  if (length(upper_triangle[upper_triangle == 1]) == 0){
    return(items)
  } else {
    print(1)
    generate_unique_random_items(num_items,vector_length)
  }

}

items <- generate_unique_random_items(num_items = 100, vector_length = 20)


```

